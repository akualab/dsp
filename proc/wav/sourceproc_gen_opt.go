// generated by optioner -type SourceProc; DO NOT EDIT

// Please report issues and submit contributions at:
// http://github.com/akualab/optioner
// optioner is a project of AKUALAB INC.

package wav

// Option type is used to set options in SourceProc.
type optSourceProc func(*SourceProc) optSourceProc

// Option method sets the options. Returns previous option for last arg.
func (t *SourceProc) Option(options ...optSourceProc) (previous optSourceProc) {
	for _, opt := range options {
		previous = opt(t)
	}
	return previous
}

// Zm sets a value for instances of type SourceProc.
func Zm(o bool) optSourceProc {
	return func(t *SourceProc) optSourceProc {
		previous := t.zm
		t.zm = o
		return Zm(previous)
	}
}

// WinType sets a value for instances of type SourceProc.
func WinType(o int) optSourceProc {
	return func(t *SourceProc) optSourceProc {
		previous := t.winType
		t.winType = o
		return WinType(previous)
	}
}

// FrameSize sets a value for instances of type SourceProc.
func FrameSize(o int) optSourceProc {
	return func(t *SourceProc) optSourceProc {
		previous := t.frameSize
		t.frameSize = o
		return FrameSize(previous)
	}
}

// StepSize sets a value for instances of type SourceProc.
func StepSize(o int) optSourceProc {
	return func(t *SourceProc) optSourceProc {
		previous := t.stepSize
		t.stepSize = o
		return StepSize(previous)
	}
}

// BufSize sets a value for instances of type SourceProc.
func BufSize(o int) optSourceProc {
	return func(t *SourceProc) optSourceProc {
		previous := t.bufSize
		t.bufSize = o
		return BufSize(previous)
	}
}

// Fs sets a value for instances of type SourceProc.
func Fs(o float64) optSourceProc {
	return func(t *SourceProc) optSourceProc {
		previous := t.fs
		t.fs = o
		return Fs(previous)
	}
}

// Start sets a value for instances of type SourceProc.
func Start(o int) optSourceProc {
	return func(t *SourceProc) optSourceProc {
		previous := t.start
		t.start = o
		return Start(previous)
	}
}

// End sets a value for instances of type SourceProc.
func End(o int) optSourceProc {
	return func(t *SourceProc) optSourceProc {
		previous := t.end
		t.end = o
		return End(previous)
	}
}
